// ุงูููู: components/ai-talker/AiTalker.tsx

'use client';

import {
  useState,
  useRef,
  useEffect,
  useCallback
} from 'react';
import Lottie, { LottieRefCurrentProps } from 'lottie-react';
import robotAnimation from './robot-static.json';
import styles from './page.module.css'; // ุงุณุชุฎุฏุงู ุงุณู ุงูููู ุงูููุฌูุฏ ูุฏูู
import TypingEffectText from '../typing-effect-text/page'; // ุชุฃูุฏ ูู ุงููุณุงุฑ

const INITIAL_QUESTION = "ูุฑุญุจุงู! ูู ุชุญุชุงุฌ ูุณุงุนุฏุฉ ูู ุญู ูุฐุง ุงูุชูุฑููุ"; // ููููู ุฅุถุงูุฉ ุฅูููุฌู ููุง ุฅุฐุง ุฃุฑุฏุช

interface AiTalkerProps {
  exerciseType?: string;
  onHelpRequest?: () => void;
  onExplainRequest?: () => void;
}

const AiTalker: React.FC<AiTalkerProps> = ({
  exerciseType,
  onHelpRequest,
  onExplainRequest
}) => {
  const lottieRef = useRef<LottieRefCurrentProps>(null);
  const [showDialog, setShowDialog] = useState(false);
  const [dialogContent, setDialogContent] = useState<string[]>([]);
  const [isTypingComplete, setIsTypingComplete] = useState(false);

  useEffect(() => {
     if (lottieRef.current) { lottieRef.current.setSpeed(0.7); }
  }, []);

  useEffect(() => {
    setIsTypingComplete(false);
  }, [dialogContent]);

  const handleClick = () => {
    if (lottieRef.current) { lottieRef.current.goToAndPlay(0); lottieRef.current.setSpeed(1.2); setTimeout(() => { if (lottieRef.current) lottieRef.current.setSpeed(0.7); }, 1000); }
    const nextShowDialogState = !showDialog;
    setShowDialog(nextShowDialogState);
    if (nextShowDialogState) {
      setDialogContent([INITIAL_QUESTION]);
    } else {
      setDialogContent([]);
    }
  };

  const handleTypingComplete = useCallback(() => {
    if (dialogContent.length === 1 && dialogContent[0] === INITIAL_QUESTION) {
      setIsTypingComplete(true);
    }
  }, [dialogContent]);

  const handleYesClick = () => {
    if (onHelpRequest) {
      onHelpRequest();
    }
    // ููููู ุฅุถุงูุฉ ุฅูููุฌู ููุง
    setDialogContent([
      "ุญุณููุง!:",
      "ูุฐุง ุงูุชูุฑูู ููุฏู ููุทุงุจูุฉ ุงููููุงุช ูุน ุงูุตูุฑ ุงูููุงุณุจุฉุ ุงูุฑุฃ ูู ูููุฉ ุจุนูุงูุฉ ูุงุฎุชุฑ ุงูุตูุฑุฉ ุงูุชู ุชูุซููุง."
    ]);
  };

  const handleNoClick = () => {
    // ููููู ุฅุถุงูุฉ ุฅูููุฌู ููุง
    setDialogContent(["ุญุณูุง! ุญุธุง ููููุง ๐"]);
    setTimeout(() => {
      setShowDialog(false);
      setDialogContent([]);
    }, 20000); // ุงูุชุฃุฎูุฑ 20 ุซุงููุฉ ููุง ูู ุงูููุฏ ุงูุฐู ูุฏูุชู
  };

  const handleExplain = () => {
    if (onExplainRequest) {
      onExplainRequest();
    }
     // ููููู ุฅุถุงูุฉ ุฅูููุฌู ููุง
    setDialogContent([
      "ูุฐุง ุงูุชูุฑูู ููุฏู ููุทุงุจูุฉ ุงููููุงุช ูุน ุงูุตูุฑ ุงูููุงุณุจุฉ.",
      "ุชุฃูุฏ ูู ูุฑุงุกุฉ ูู ูููุฉ ุจุนูุงูุฉ ูุจู ุงุฎุชูุงุฑ ุงูุตูุฑุฉ ุงููุทุงุจูุฉ ููุง."
    ]);
    setShowDialog(true);
  };

  return (
    <div className={styles.robotContainer}>
      {showDialog && (
        <div className={styles.dialogContainer}>
          <div className={styles.dialogContentWrapper}>
            {/* ููุทูุฉ ุงููุต */}
            <div className={styles.dialogTextContent}>
              <TypingEffectText
                key={dialogContent.join('-')}
                paragraphs={dialogContent}
                speed={40}
                initialDelay={300}
                interParagraphDelay={1000}
                onTypingComplete={handleTypingComplete}
                // ูุง ููุฑุฑ onContentHeightChange
              />
            </div>

            {/* ุงูุฃุฒุฑุงุฑ (ูุดุฑูุทุฉ) */}
            {isTypingComplete && (
              <div className={styles.dialogActions}>
                 <button onClick={handleYesClick} className={`${styles.actionButton} ${styles.yesButton}`}>ูุนู</button>
                 <button onClick={handleNoClick} className={`${styles.actionButton} ${styles.noButton}`}>ูุง</button>
              </div>
            )}
          </div>
        </div>
      )}
      {/* ุงูุฑูุจูุช */}
      <div className={styles.robotWrapper} onClick={handleClick} title={`ูุณุงุนุฏ ุฐูู ูุชูุงุฑูู ${exerciseType || 'ุงููุฏุฑุณุฉ'}`}>
        <Lottie lottieRef={lottieRef} animationData={robotAnimation} loop={true} autoplay={true} className={styles.robotAnimation} />
      </div>
    </div>
  );
};

export default AiTalker;